---
#- name: Load variables
#  include_vars: "{{ item }}"
#  with_first_found:
#    - files:
#        - defaults.yml
#      paths:
#        - ../ambari-blueprint/vars

- name: Check if a cluster {{ cluster_name }} already exists
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/clusters/dimagi"
    method: GET
    force_basic_auth: yes
    user: admin
    password: admin
    headers: '{"X-Requested-By":"ambari"}'
    status_code: 200,201,202,404
  register: cluster_check

- name: Fail if a cluster {{ cluster_name }} already exists
  fail:
    msg: Cluster dimagi already exists!
  when: cluster_check.status != 404

- name: Generate the cluster dynamic blueprint
  set_fact:
    cluster_blueprint: "{{ lookup('template', blueprint_file, convert_data=False) }}"
  when: blueprint_file == 'blueprint_dynamic.j2'

- name: Generate the cluster static blueprint
  set_fact:
    cluster_blueprint: "{{ lookup('file', blueprint_file, convert_data=False) }}"
  when: blueprint_file != 'blueprint_dynamic.j2'

- name: Print the cluster blueprint
  debug:
    var: cluster_blueprint
    verbosity: 1

- name: Generate the cluster creation template
  set_fact:
    cluster_template: "{{ lookup('template', cluster_template_file, convert_data=False) }}"

- name: Print the cluster creation template
  debug:
    var: cluster_template
    verbosity: 1

- name: Delete any existing blueprint called {{ blueprint_name }}
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/blueprints/{{ blueprint_name }}"
    method: DELETE
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    status_code: 200,201,202,404
    return_content: no
  when: cluster_check.status == 404

- name: Upload the blueprint {{ blueprint_name }} to the Ambari server
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/blueprints/{{ blueprint_name }}"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: "{{ cluster_blueprint|to_json }} "
    body_format: raw
    status_code: 200,201,202,409
    timeout: 60
    return_content: no

- name: Launch the create cluster request
  uri:
    url: http://{{ ansible_fqdn }}:8080/api/v1/clusters/{{ cluster_name }}
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: "{{ cluster_template|to_json }} "
    body_format: raw
    status_code: 200,201,202
    timeout: 120
    return_content: yes
  register: cluster_create_task

- name: Wait for the cluster to be built
  uri:
    url: "{{ (cluster_create_task.content|from_json).href }}"
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
    status_code: 200,201,202
    return_content: yes
  register: cluster_check_task
  until: (((cluster_check_task.content|from_json).Requests.request_status == 'COMPLETED' and (cluster_check_task.content|from_json).Requests.completed_task_count|int > 0) or
         (cluster_check_task.content|from_json).Requests.request_status == 'FAILED' or
         (cluster_check_task.content|from_json).Requests.request_status == 'TIMEDOUT' or
         (cluster_check_task.content|from_json).Requests.request_status == 'ABORTED')
  retries: "{{ wait_timeout // 10 }}"
  delay: 10
  when: wait and cluster_create_task is defined and cluster_create_task

- name: Fail if the cluster create task is in an error state
  fail:
    msg: "Failed to build the {{ cluster_name }} cluster. Task Status is {{ (cluster_check_task.content|from_json).Requests.request_status }}."
  when: wait and ((cluster_check_task.content|from_json).Requests.request_status == 'FAILED' or
         (cluster_check_task.content|from_json).Requests.request_status == 'TIMEDOUT' or
         (cluster_check_task.content|from_json).Requests.request_status == 'ABORTED')

